# .github/workflows/deploy.yml
name: CI/CD: FastAPI → Home Server Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) SSH 설정 (비밀 키 복사, 권한 설정)
      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          # secrets.SSH_PRIVATE_KEY 에는 로컬 ralo.pem 전체 텍스트가 저장되어 있어야 합니다.
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ralo.pem
          chmod 400 ~/.ssh/ralo.pem
          # 서버 호스트 키 자동 등록 (yes/no 묻지 않도록)
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        shell: bash

      # 3) (선택) 로컬 CI 빌드/테스트 단계가 필요하면 여기에 추가

      # 4) SSH로 홈 서버 접속 → 프로젝트 디렉터리( /home/rlacks2011/GalaeMalae/GalaeMalae-BE ) 이동 후 Docker 빌드 & 재배포
      - name: Deploy to server via SSH
        run: |
          ssh -i ~/.ssh/ralo.pem -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            # (1) 프로젝트 위치로 이동
            cd /home/rlacks2011/GalaeMalae/GalaeMalae-BE

            # (2) Git에서 최신 코드 가져오기
            git fetch origin main
            git reset --hard origin/main

            # (3) Docker 이미지 빌드
            docker build -t fastapi-app:latest .

            # (4) 기존 컨테이너 종료 및 삭제 (있으면)
            if [ "$(docker ps -q -f name=fastapi-container)" ]; then
              docker stop fastapi-container
              docker rm fastapi-container
            fi

            # (5) 새 컨테이너 실행
            docker run -d \
              --name fastapi-container \
              -p 8000:8000 \
              fastapi-app:latest

            # (선택) 컨테이너 로그 확인 (디버깅용)
            docker logs fastapi-container --tail 100
          EOF
        shell: bash